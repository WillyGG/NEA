28 Dec: 
  - implemented counting AI interface
  - designed and started to implement probablility chances (bustchance blackjack chance etc)
  - Added search functionality and counting total number of cards in subtree functionality to imp ^

  - TODO: - implement maintainance of tree from within the tree class
	  - find a way to abstract away the post/pre/in order traversals
	  - Test the implementation of the bust chances

29 Dec:
    - completed lower level calc chance methods

    TODO:
        - Statistical analysis of chances to be used by CC AI - run through a lot of games and graph the empirical data
        - find a way to abstract away the post/pre/in order traversals
	    - Test the implementation of the bust chances
	    - UPDATE BUSTCHANCE TO INCLUDE EVERYTHING IN RIGHT SUBTREE, AND NODES ABOVE, IF TURNING NODE IS IN LEFT SUBTREE and do the same for the exceed dealer chance.
	       - Greater than and less than card counts, create a new tree out of each node? Too inefficient?

30 Dec:
    - completed high-level composite counting function.
    - created individual trees, with turning node as the root, if the turning node is on the left subtree, then count everything on the right of the root of this new subtree.

    TODO:
        - Statistical analysis of thresholds to be used by CC AI - run through a lot of games and graph the empirical data
        - find a way to abstract away the post/pre/in order traversals
	    - Test the implementation of all the chances
	    - Test the implementation of the card counting, and add a counting of less than or equal to the turning node
	    - Once behaviour is tested and is as intended, begin adding thresholds and implement in game behaviour then test these thresholds

02 Jan:
    - Tested and debugged:
        counting for root and nodes in right subtree, nodes for left subtree

    - Main bugs were with node comparison - sometimes i passed an integer, sometimes I passed a node, made the decrement method compatible for both
    - The way python makes references to variables - nodes in the main tree were being overwritten by nodes in the count tree. Fixed this by making new copies of the nodes (although inefficient)

03 Jan:
    - Tested node deletion due to decrementation

    TODO:
        - Alter blackjack game interface so that it does not create a new deck each time?
        - improve NN to include recurrent features, try different algorithms, then try to use counting AI as new features?

05 Jan:
    - changed blackjack to keep deck after each game, until empty
    - Changed the deck class so that it autoshuffles when it is empty.
    - Changed a tracker boolean variable to int which keeps track of which iteration the deck is on
    - Changed the blackjack game so that it does not create a new deck after each game.
    - Changed the getNode tree method into getNode (initial function) and getNode Traversal (recursive function)
    - Debugged the getNode Traversal (nonetype attribute error -> changed the order of checking at start of function to if none -> if == nodeValue)
    - Debugged chance calculating algo.s - checked if cannot or already bust/blackjack'd
    - Issue -> getting next node greater than turning node, when turning node is in left subtree. (cannot just get node on right, root and all of right subtree is larger)
    - ^ Debugged by getting calling getNode on next largest value (maybe implement a getNextNode function in BT or getPrevNode?)
    - Issue -> GT Turning node sometimes returns None

    TODO:
    - Package traversal functionality in a static class
    - Begin working on basic ifs and loops version
    - Comparison tool will be the MEAT of the marks in this paradigm


06 Jan:
    - Debugged the getNode recursive function to return the correct node rather than returning none.
    - Debugged the exceed dealer chance funciton ==> cannot just get the right node of the turning node, to find next node up, have to getNode seperately. Also calculated the turning node's value correctly (now gets value needed to EXCEED)
    - bug -> blackjack chance calculator still returns none sometimes??
    - bug?? -> exceedDlrNoBust sometimes returns a negative value

    - fixed blja and bust chances by correcting condition checks for already bust/blackjack/cannot
    - implemented first version of simple AI


    TODO:
    - find a way to adjust the maxcard if all the aces have been drawn
    - implement a way to check if the counting has to be reset during the game.
    - faking move the maintainence to the tree.

 08 Jan:
    - corrected return none bug, adjusted limits and conditions for already blackjack/bust, results in getting correct node
    - debugged getNodeTraverse by returning what the subtree recursive calls return.
    - First implementation of simple AI
        - Always hit if cannot go bust
        - Hit until above dealer, and until get close to going bust.

    TODO:
    - Calc chances returns chances above 1 and below 0 sometimes - logical tests
    - implement interface for simple AI
    - test simple ai
    - Start comparison tool designs
    - implement tests for behaviour --> Test Decrement, hit/stand, reset tree, adjust tree for royals + add ace functionality
    - implement a more nuanced behaviour for the decisions by the CCAI
    - Change the CCAI parameters to be personality parameters (eg aggression) and then calculate the thresholds based on this.
    - implement a sort for inputting nodes when building tree

   09 Jan:
   - debugged the logic of the CCAI (sometimes chances went above 1 or below 0)
    - Implemented the decsision making behaviour, with the chance thresholds
    - began designs for the BT Maintainence

   10 Jan:
    - Completed BTMaintainence psudocode and concept
    - Began implementing the actual code

    TODO:
    - Add a display tree structure function to display the structure of the binary tree.
    - Continue implementing the BST Maintainence
    - complete compare_ST_Traverse function

   15 Jan:
    - Complete BTMaintainence 1st 1st implementation
    - began concept and pseudocode for comparison tool

    TODO:
    - Test the compare_ST_Traverse and Get_Max_LST and Get_Min_RST functions
    - Implement an interface for the comparison tool, to be implemented by all the different AI

    Next -> Extend Blackjack to accomodate more than one player. -> split the blackjack class into hands and use compostition.

   19 Jan
    - implemented Hand class
    - changed blackjack class to accommodate for hand class
        - changed: reset, init_deal, assess_hand (may not be needed), compare_hands, deal, hit, stand, display_game, end_game

    TODO:
    - TEST FAKING EVERYTHING
    - create a dealer child class
    - implement dealer changes
    - pass in the players to the blackjack class

